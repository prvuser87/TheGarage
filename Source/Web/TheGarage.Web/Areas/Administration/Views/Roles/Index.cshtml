@{
    //ViewBag.Title = Resource.Page_title;
    const string ControllerName = "Roles";
}
<h1>"Roles"</h1>

@(Html.Kendo().Grid<TheGarage.Web.Areas.Administration.ViewModels.Roles.RoleAdministrationViewModel>()
    .Name("DataGrid")
    .Columns(columns =>
    {
        columns.Bound(col => col.Name);
        columns.Command(command => command.Edit().Text(" ").UpdateText("Change").CancelText("Cancle")).Width(80);
        columns.Command(command => command.Destroy().Text(" ")).Width(80);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create().Text("Create");
        toolbar.Custom().Text("Back_to_navigation").Action("Navigation", "Administration", new { Area = "" }).Name("custom-toolbar-button");
        //toolbar.Custom().Text("Export_to_excel").Name("custom-toolbar-button").HtmlAttributes(new { id = "export" }).Url(Url.Action("ExportToExcel", ControllerName, new { page = 1, pageSize = "~", filter = "!!", sort = "~" }));
    })
    .Editable(editable =>
    {
        editable.Mode(GridEditMode.PopUp);
        editable.Window(w => w.Title("Title"));
        editable.DisplayDeleteConfirmation("Delete prompt");
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .ClientDetailTemplateId("users-in-role")
    .ColumnMenu()
    //.Events(e => e.DataBound("onDataBound"))
    .Pageable(x => x.Refresh(true))
    .Sortable(x => x.Enabled(true).AllowUnsort(false))
    .Filterable(x => x.Enabled(true))
    .Reorderable(x => x.Columns(true))
    .Resizable(x => x.Columns(true))
    .DataSource(datasource => datasource
        .Ajax()
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(m => m.RoleId);
        })
        .Sort(sort => sort.Add(x => x.Name).Descending())
        .Create(create => create.Action("Create", ControllerName))
        .Read(read => read.Action("Read", ControllerName))
        .Update(update => update.Action("Update", ControllerName))
        .Destroy(destroy => destroy.Action("Destroy", ControllerName))
    //.Events(ev => ev.Error("validateModelStateErrors"))
    )
)

@*<script type="text/javascript">
    function onDataBound() {
        CreateExportToExcelButton();
    }
</script>*@

<script type="text/x-kendo-template" id="users-in-role">
    @(Html.Kendo().Grid<TheGarage.Web.Areas.Administration.ViewModels.Roles.UserInRoleAdministrationViewModel>()
        .Name("DetailGrid_#=Name#")
        .Columns(columns =>
        {
            columns.Bound(m => m.UserName);
            columns.Bound(m => m.FirstName);
            columns.Bound(m => m.LastName);
            columns.Bound(m => m.Email);
            columns.Command(com => com.Destroy().Text(" ")).Width(80);
        })
        .ToolBar(tool => 
            {
                tool.Create().Text("Page title");
            })
        .Editable(edit => 
            {
                edit.Mode(GridEditMode.PopUp);
                edit.Window(w => w.Title("Some title"));
                // edit.AdditionalViewData(new { RoleId = "#= RoleId #" });
                // TODO: Send to editor template the current RoleId so that users in current role cannot dublicate
                edit.TemplateName("AddUserToRole");
                edit.DisplayDeleteConfirmation("Delete_prompt");
            })
        .DataSource(data => 
        {
            data.Ajax()
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(m => m.Id);
            })
            .Sort(sort => sort.Add(field => field.UserName))
            .Create(create => create.Action("AddUserToRole", ControllerName, new { id = "#= RoleId #" }))
            .Read(read => read.Action("UsersInRole", ControllerName, new { id = "#= RoleId #" }))
            .Destroy(destroy => destroy.Action("DeleteUserFromRole", ControllerName, new { id = "#= RoleId #" }));
        })
        .ToClientTemplate())
</script>
